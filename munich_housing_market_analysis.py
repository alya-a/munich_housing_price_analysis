# -*- coding: utf-8 -*-
"""munich_housing_market_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hcHpRri7zSZXCVwTWGjjoV98S7T5Vom6
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#load the CSV file
#dataset online source: https://www.kaggle.com/code/tompaulat/webscraping-rental-prices-in-munich/output?select=rents_munich.csv
file_path = '/content/rents_munich.csv'
data = pd.read_csv(file_path)

#clean the Description column
data['Region'] = data['Description'].apply(lambda x: x.split('|')[1].replace('München', '').strip() if '|' in x else 'Unknown')

#clean the Price and qm² columns
data['Price'] = data['Price'].str.replace('€', '').str.replace(',', '').astype(float)
data['qm2'] = data['qm2'].str.replace('m²', '').str.replace(',', '').astype(float)

#calculate price per qm²
data['price_per_qm'] = data['Price'] / data['qm2']

#group by region + calculate the mean price per qm²
region_price = data.groupby('Region')['price_per_qm'].mean().reset_index()

#find the regions with the most expensive and cheapest apartments
most_expensive_region = region_price.loc[region_price['price_per_qm'].idxmax()]
cheapest_region = region_price.loc[region_price['price_per_qm'].idxmin()]

#find the median price per qm²
median_price = region_price['price_per_qm'].median()
median_region = region_price[region_price['price_per_qm'] == median_price].iloc[0]

#find the three most expensive and three cheapest regions
most_expensive_regions = region_price.nlargest(3, 'price_per_qm')
cheapest_regions = region_price.nsmallest(3, 'price_per_qm')

#color adjustment
red_palette = sns.color_palette('Reds', n_colors=3)
blue_palette = sns.color_palette('Blues', n_colors=3)

#plot: regions by average price per qm²
plt.figure(figsize=(14, 6))
sns.barplot(data=region_price, x='Region', y='price_per_qm', palette='coolwarm', order=region_price.sort_values('price_per_qm')['Region'], width=0.8)
plt.xticks(rotation=45, ha='right', fontsize=8)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Price per qm² (€)', fontsize=12)
plt.title('Average Price per qm² by Region in Munich', fontsize=14)
plt.grid(False)
plt.tight_layout()  #layout adjustment to prevent cropping of labels

plt.subplots_adjust(bottom=0.3)

#plot: most expensive and cheapest regions
plt.figure(figsize=(8, 4))
sns.barplot(x=[most_expensive_region['Region'], cheapest_region['Region']],
            y=[most_expensive_region['price_per_qm'], cheapest_region['price_per_qm']],
            palette=[red_palette[0], blue_palette[0]], width=0.5)
plt.title('Price per qm² in the Most Expensive and Cheapest Regions', fontsize=14)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Price per qm² (€)', fontsize=12)
plt.grid(False)
plt.tight_layout()

#prices placed horizontally next to the bars
for i, val in enumerate([most_expensive_region['price_per_qm'], cheapest_region['price_per_qm']]):
    plt.text(i, val, f'{val:.2f}', ha='center', va='bottom', fontsize=9, color='black')

#chart: the three most expensive and cheapest regions
plt.figure(figsize=(10, 6))
sns.barplot(data=pd.concat([most_expensive_regions, cheapest_regions]), x='Region', y='price_per_qm', hue='Region', palette=[red_palette[0], red_palette[1], red_palette[2], blue_palette[0], blue_palette[1], blue_palette[2]])
plt.title('Three Most Expensive and Cheapest Regions', fontsize=14)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Price per qm² (€)', fontsize=12)
plt.grid(False)
plt.xticks(rotation=45, ha='right', fontsize=10)  # Adjust rotation and alignment of region labels, and increase font size
plt.tight_layout()  #layout adjustment to prevent overlapping labels

plt.show()